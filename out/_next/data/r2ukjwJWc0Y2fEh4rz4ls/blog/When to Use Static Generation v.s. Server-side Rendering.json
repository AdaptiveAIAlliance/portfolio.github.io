{"pageProps":{"postData":{"id":"When to Use Static Generation v.s. Server-side Rendering","contentHtml":"<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications. It runs on the Erlang VM (BEAM), known for its ability to handle millions of concurrent connections—perfect for web apps, real-time systems, and more.</p>\n<p>In this tutorial, we'll walk through the basics of Elixir by building a simple CLI calculator. By the end, you'll have a solid foundation to build more complex Elixir applications.</p>\n<h2>🧰 Prerequisites</h2>\n<ul>\n<li>Elixir installed (see <a href=\"https://elixir-lang.org/install.html\">elixir-lang.org/install.html</a>)</li>\n<li>Basic understanding of programming concepts</li>\n</ul>\n<p>Verify your installation:</p>\n<pre><code class=\"language-bash\">elixir -v\n</code></pre>\n<h2>🏗️ Create a New Project</h2>\n<p>Elixir comes with a build tool called Mix. Let's create a new project:</p>\n<pre><code class=\"language-bash\">mix new calculator\ncd calculator\n</code></pre>\n<p>This creates a scaffold with the following structure:</p>\n<pre><code class=\"language-bash\">calculator/\n├── lib/\n│ └── calculator.ex\n├── test/\n│ └── calculator_test.exs\n├── mix.exs\n</code></pre>\n<h2>✏️ Writing Your First Elixir Function</h2>\n<p>Open lib/calculator.ex and replace the contents with:</p>\n<pre><code class=\"language-elixir\">defmodule Calculator do\ndef add(a, b), do: a + b\ndef subtract(a, b), do: a - b\ndef multiply(a, b), do: a \\* b\ndef divide(a, b) when b != 0, do: a / b\ndef divide(\\_, 0), do: {:error, \"Cannot divide by zero\"}\nend\n</code></pre>\n<p>We’ve just defined a simple module with basic arithmetic functions. Notice how Elixir uses pattern matching (when b != 0) for control flow.</p>\n<h2>🧪 Writing Tests</h2>\n<p>Let’s write tests for our functions. Open test/calculator_test.exs and update it:</p>\n<pre><code class=\"language-elixir\">\ndefmodule CalculatorTest do\nuse ExUnit.Case\ndoctest Calculator\n\ntest \"addition\" do\nassert Calculator.add(1, 2) == 3\nend\n\ntest \"subtraction\" do\nassert Calculator.subtract(5, 3) == 2\nend\n\ntest \"multiplication\" do\nassert Calculator.multiply(4, 3) == 12\nend\n\ntest \"division\" do\nassert Calculator.divide(10, 2) == 5.0\nassert Calculator.divide(10, 0) == {:error, \"Cannot divide by zero\"}\nend\nend\n</code></pre>\n<p>Run the tests:</p>\n<pre><code class=\"language-bash\">mix test\n</code></pre>\n<p>✅ You should see green output if all tests pass.</p>\n<h2>🧑‍💻 Running It from the Terminal</h2>\n<p>Want to run your functions manually? Use iex (Interactive Elixir):</p>\n<pre><code class=\"language-bash\">iex -S mix\n</code></pre>\n<p>Now you can call:</p>\n<pre><code class=\"language-elixir\">Calculator.add(10, 5)\n</code></pre>\n<h2>🌟 Next Steps</h2>\n<p>You’ve just written your first Elixir module and tests! Here are some directions you can go next:</p>\n<p>Learn about Pattern Matching</p>\n<p>Explore Recursion in Elixir</p>\n<p>Dive into Phoenix Framework for web development</p>\n<p>Try writing a GenServer to learn OTP fundamentals\nHappy coding with Elixir! ⚡️</p>\n","title":"Getting Started with Elixir: A Beginner's Tutorial","intro":"Elixir is a dynamic, functional language designed for building scalable and maintainable applications.","featImage":"Getting Started with Elixir: A Beginner's Tutorial.jpg","alt":"test","categories":["Programming","Elixir","Functional Programming"],"tags":["elixir","beginner","functional programming","mix","iex","testing","cli","tutorial"],"date":"2025-04-10","author":"john Due","authorImage":"/AAA_profile_pic.png"}},"__N_SSG":true}